<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Everise&#39;s Notes</title>
  
  <subtitle>Quick Notes</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://everise.github.io/"/>
  <updated>2019-06-16T03:27:29.872Z</updated>
  <id>https://everise.github.io/</id>
  
  <author>
    <name>everise</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LeetCode 215: Kth Largest Element in an Array</title>
    <link href="https://everise.github.io/2019/06/15/LeetCode-215-Kth-Largest-Element-in-an-Array/"/>
    <id>https://everise.github.io/2019/06/15/LeetCode-215-Kth-Largest-Element-in-an-Array/</id>
    <published>2019-06-16T03:26:29.000Z</published>
    <updated>2019-06-16T03:27:29.872Z</updated>
    
    <content type="html"><![CDATA[<p>Find the kth largest element in an unsorted array. Note that it is the kth largest element in the sorted order, not the kth distinct element.</p><p><strong>Example 1:</strong></p><p>Input: [3,2,1,5,6,4] and k = 2<br>Output: 5</p><p><strong>Example 2:</strong></p><p>Input: [3,2,3,1,2,4,5,5,6] and k = 4<br>Output: 4</p><p><strong>Note:</strong><br>You may assume k is always valid, 1 ≤ k ≤ array’s length.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findKthLargest</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    PriorityQueue&lt;Integer&gt; q = <span class="keyword">new</span> PriorityQueue&lt;Integer&gt;(k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i: nums)&#123;</span><br><span class="line">        q.offer(i);</span><br><span class="line">        <span class="keyword">if</span>(q.size() &gt; k) q.poll();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> q.peek();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Find the kth largest element in an unsorted array. Note that it is the kth largest element in the sorted order, not the kth distinct elem
      
    
    </summary>
    
      <category term="LeetCode" scheme="https://everise.github.io/categories/LeetCode/"/>
    
      <category term="Amazon" scheme="https://everise.github.io/categories/LeetCode/Amazon/"/>
    
    
  </entry>
  
  <entry>
    <title>LeetCode 146: LRU Cache</title>
    <link href="https://everise.github.io/2019/06/15/LeetCode-146-LRU-Cache/"/>
    <id>https://everise.github.io/2019/06/15/LeetCode-146-LRU-Cache/</id>
    <published>2019-06-16T02:36:55.000Z</published>
    <updated>2019-06-16T19:27:11.553Z</updated>
    
    <content type="html"><![CDATA[<p>Design and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: get and put.</p><p>get(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.<br>put(key, value) - Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.</p><p>The cache is initialized with a positive capacity.</p><p><strong>Follow up:</strong><br>Could you do both operations in O(1) time complexity?</p><p><strong>Example:</strong></p><p>LRUCache cache = new LRUCache( 2 /<em> capacity </em>/ );</p><p>cache.put(1, 1);<br>cache.put(2, 2);<br>cache.get(1);       // returns 1<br>cache.put(3, 3);    // evicts key 2<br>cache.get(2);       // returns -1 (not found)<br>cache.put(4, 4);    // evicts key 1<br>cache.get(1);       // returns -1 (not found)<br>cache.get(3);       // returns 3<br>cache.get(4);       // returns 4</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LRUCache</span> </span>&#123;    </span><br><span class="line">    <span class="keyword">private</span> Map&lt;Integer, Integer&gt; map;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> capacity;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LRUCache</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        map = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">this</span>.capacity = capacity;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!map.containsKey(key)) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> val = map.get(key);</span><br><span class="line">        map.remove(key);</span><br><span class="line">        map.put(key, val);</span><br><span class="line">        <span class="keyword">return</span> val;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        map.remove(key);</span><br><span class="line">        map.put(key, value);</span><br><span class="line">        <span class="keyword">if</span> (map.size() &gt; <span class="keyword">this</span>.capacity) &#123;</span><br><span class="line">            map.remove(map.entrySet().iterator().next().getKey());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Design and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: get and put.&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="LeetCode" scheme="https://everise.github.io/categories/LeetCode/"/>
    
      <category term="Amazon" scheme="https://everise.github.io/categories/LeetCode/Amazon/"/>
    
    
  </entry>
  
  <entry>
    <title>LeetCode 140: Word Break II</title>
    <link href="https://everise.github.io/2019/06/15/LeetCode-140-Word-Break-II/"/>
    <id>https://everise.github.io/2019/06/15/LeetCode-140-Word-Break-II/</id>
    <published>2019-06-16T02:36:07.000Z</published>
    <updated>2019-06-16T02:37:51.653Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="LeetCode" scheme="https://everise.github.io/categories/LeetCode/"/>
    
      <category term="Amazon" scheme="https://everise.github.io/categories/LeetCode/Amazon/"/>
    
    
  </entry>
  
  <entry>
    <title>LeetCode 138: Copy List with Random Pointer</title>
    <link href="https://everise.github.io/2019/06/15/LeetCode-138-Copy-List-with-Random-Pointer/"/>
    <id>https://everise.github.io/2019/06/15/LeetCode-138-Copy-List-with-Random-Pointer/</id>
    <published>2019-06-16T02:35:41.000Z</published>
    <updated>2019-06-16T02:35:41.657Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>LeetCode 133: Clone Graph</title>
    <link href="https://everise.github.io/2019/06/15/LeetCode-133-Clone-Graph/"/>
    <id>https://everise.github.io/2019/06/15/LeetCode-133-Clone-Graph/</id>
    <published>2019-06-16T02:35:15.000Z</published>
    <updated>2019-06-16T02:37:46.177Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="LeetCode" scheme="https://everise.github.io/categories/LeetCode/"/>
    
      <category term="Amazon" scheme="https://everise.github.io/categories/LeetCode/Amazon/"/>
    
    
  </entry>
  
  <entry>
    <title>LeetCode 128: Longest Consecutive Sequence</title>
    <link href="https://everise.github.io/2019/06/15/LeetCode-128-Longest-Consecutive-Sequence/"/>
    <id>https://everise.github.io/2019/06/15/LeetCode-128-Longest-Consecutive-Sequence/</id>
    <published>2019-06-16T02:34:47.000Z</published>
    <updated>2019-06-16T02:37:42.597Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="LeetCode" scheme="https://everise.github.io/categories/LeetCode/"/>
    
      <category term="Amazon" scheme="https://everise.github.io/categories/LeetCode/Amazon/"/>
    
    
  </entry>
  
  <entry>
    <title>LeetCode 127: Word Ladder</title>
    <link href="https://everise.github.io/2019/06/15/LeetCode-127-Word-Ladder/"/>
    <id>https://everise.github.io/2019/06/15/LeetCode-127-Word-Ladder/</id>
    <published>2019-06-16T02:34:22.000Z</published>
    <updated>2019-06-22T03:25:51.835Z</updated>
    
    <content type="html"><![CDATA[<p>Given two words (beginWord and endWord), and a dictionary’s word list, find the length of shortest transformation sequence from beginWord to endWord, such that:</p><p>Only one letter can be changed at a time.<br>Each transformed word must exist in the word list. Note that beginWord is not a transformed word.</p><p><strong>Note:</strong></p><p>Return 0 if there is no such transformation sequence.<br>All words have the same length.<br>All words contain only lowercase alphabetic characters.<br>You may assume no duplicates in the word list.<br>You may assume beginWord and endWord are non-empty and are not the same.</p><p><strong>Example 1:</strong><br><a id="more"></a><br>Input:<br>beginWord = “hit”,<br>endWord = “cog”,<br>wordList = [“hot”,”dot”,”dog”,”lot”,”log”,”cog”]</p><p>Output: 5</p><p>Explanation: As one shortest transformation is “hit” -&gt; “hot” -&gt; “dot” -&gt; “dog” -&gt; “cog”,<br>return its length 5.</p><p><strong>Example 2:</strong></p><p>Input:<br>beginWord = “hit”<br>endWord = “cog”<br>wordList = [“hot”,”dot”,”dog”,”lot”,”log”]</p><p>Output: 0</p><p>Explanation: The endWord “cog” is not in wordList, therefore no possible transformation.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Approach 1: BFS</span></span><br><span class="line"><span class="comment"> * 对于这道题目，我们可以这么去解决。</span></span><br><span class="line"><span class="comment"> * 因为字符串每次只能改变 一个 字符，所以也就意味着：</span></span><br><span class="line"><span class="comment"> *  一个字符 一次变化 只能通向 wordList 中差距只有一个字符的单词。</span></span><br><span class="line"><span class="comment"> * 那么其实我们可以将 beginWord 与 wordList 中的单词建立一个连通图，每条边权值为 1.（就是一个简单图而已）</span></span><br><span class="line"><span class="comment"> * 建立好图后，我们就可以通过 BFS 从 beginWord 开始遍历并维持一个参数 level，看是否能找到 endWord.</span></span><br><span class="line"><span class="comment"> * 如果能找到返回 level 即可（level指的就是从 beginWord 到 endWord 我们需要经过几层BFS,或者说 走过几条边）</span></span><br><span class="line"><span class="comment"> * 如果不能找到则返回 0 即可。</span></span><br><span class="line"><span class="comment"> * 这里之所以选择 BFS 而不是 DFS，原因是我们只需要找到 最短路径，而不是遍历整张图。</span></span><br><span class="line"><span class="comment"> * DFS 会遍历整张图，时间复杂度更大。因此在 简单图 的遍历中，我们通常会使用 BFS 而不是 DFS。</span></span><br><span class="line"><span class="comment"> * 类似的应用还有 The Maze 系列（同理也是求最短路径）</span></span><br><span class="line"><span class="comment"> * https://github.com/cherryljr/LeetCode/blob/master/The%20Maze.java</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 时间复杂度分析：</span></span><br><span class="line"><span class="comment"> *  BFS 遍历图的时间为 O(n);</span></span><br><span class="line"><span class="comment"> *  寻找一个单词 word 所有改变 一个 字符能够得到的单词时间复杂度为 O(26 * len) （len 为单词长度）</span></span><br><span class="line"><span class="comment"> *  因此总体时间复杂度为：O(n * len * 26) =&gt; O(n)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">ladderLength</span><span class="params">(String beginWord, String endWord, List&lt;String&gt; wordList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (wordList == <span class="keyword">null</span> || wordList.size() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 将 List 转换为 Set 以满足在 O(1) 的时间内查找 List 中是否包含某个单词</span></span><br><span class="line">        <span class="comment">// 如果使用 List 时间复杂度为 O(n),更新测试用例后会 TLE.</span></span><br><span class="line">        Set&lt;String&gt; wordSet = <span class="keyword">new</span> HashSet&lt;&gt;(wordList);</span><br><span class="line">        <span class="keyword">if</span> (!wordSet.contains(endWord)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        Queue&lt;String&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 记录已经遍历过的 word</span></span><br><span class="line">        Set&lt;String&gt; visited = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="comment">// 初始化 queue 和 visited Set.</span></span><br><span class="line">        queue.offer(beginWord);</span><br><span class="line">        visited.add(beginWord);</span><br><span class="line">        <span class="keyword">int</span> level = <span class="number">1</span>;  <span class="comment">// level 是包括自身的，所以初始大小为 1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// BFS</span></span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> size = queue.size();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                String word = queue.poll();</span><br><span class="line">                <span class="comment">// 如果找到了 endWord,直接返回 level. 根据 BFS 的特性，此时 level 就是最小的</span></span><br><span class="line">                <span class="keyword">if</span> (word.equals(endWord)) <span class="keyword">return</span> level;</span><br><span class="line">                <span class="comment">// 将 wordList 中所有与 word 相差一个字符的单词放入队列中</span></span><br><span class="line">                <span class="keyword">for</span> (String neigh : getNeighbors(word, visited,  wordSet)) queue.offer(neigh);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 该层没有找到 endWord，继续找下一层，level+1</span></span><br><span class="line">            level++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;String&gt; <span class="title">getNeighbors</span><span class="params">(String word, Set&lt;String&gt; visited, Set&lt;String&gt; wordSet)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; rst = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">char</span>[] chars = word.toCharArray();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历该单词 word,将其每个字母都分别替换成 'a' ~ 'z'</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; chars.length; i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> old = chars[i];    <span class="comment">// 暂存该位置原来的字符</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">char</span> ch = <span class="string">'a'</span>; ch &lt;= <span class="string">'z'</span>; ch++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (ch == old) <span class="keyword">continue</span>;</span><br><span class="line">                chars[i] = ch;</span><br><span class="line">                String nextWord = String.valueOf(chars);</span><br><span class="line">                <span class="comment">// 查看修改后的单词是否在 wordSet 中存在，并还未被 visited.如果符合条件就加入到 rst 中</span></span><br><span class="line">                <span class="keyword">if</span> (!visited.contains(nextWord) &amp;&amp; wordSet.contains(nextWord)) &#123;</span><br><span class="line">                    visited.add(nextWord);</span><br><span class="line">                    rst.add(nextWord);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            chars[i] = old;     <span class="comment">// 将 chars[i] 置回为原来字母</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> rst;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Given two words (beginWord and endWord), and a dictionary’s word list, find the length of shortest transformation sequence from beginWord to endWord, such that:&lt;/p&gt;
&lt;p&gt;Only one letter can be changed at a time.&lt;br&gt;Each transformed word must exist in the word list. Note that beginWord is not a transformed word.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Return 0 if there is no such transformation sequence.&lt;br&gt;All words have the same length.&lt;br&gt;All words contain only lowercase alphabetic characters.&lt;br&gt;You may assume no duplicates in the word list.&lt;br&gt;You may assume beginWord and endWord are non-empty and are not the same.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="https://everise.github.io/categories/LeetCode/"/>
    
      <category term="Amazon" scheme="https://everise.github.io/categories/LeetCode/Amazon/"/>
    
    
  </entry>
  
  <entry>
    <title>LeetCode 126: Word Ladder II</title>
    <link href="https://everise.github.io/2019/06/15/LeetCode-126-Word-Ladder-II/"/>
    <id>https://everise.github.io/2019/06/15/LeetCode-126-Word-Ladder-II/</id>
    <published>2019-06-16T02:34:07.000Z</published>
    <updated>2019-06-22T03:25:54.094Z</updated>
    
    <content type="html"><![CDATA[<p>Given two words (beginWord and endWord), and a dictionary’s word list, find all shortest transformation sequence(s) from beginWord to endWord, such that:</p><p>Only one letter can be changed at a time<br>Each transformed word must exist in the word list. Note that beginWord is not a transformed word.</p><p><strong>Note:</strong><br><a id="more"></a><br>Return an empty list if there is no such transformation sequence.<br>All words have the same length.<br>All words contain only lowercase alphabetic characters.<br>You may assume no duplicates in the word list.<br>You may assume beginWord and endWord are non-empty and are not the same.</p><p><strong>Example 1:</strong></p><p>Input:<br>beginWord = “hit”,<br>endWord = “cog”,<br>wordList = [“hot”,”dot”,”dog”,”lot”,”log”,”cog”]</p><p>Output:<br>[<br>  [“hit”,”hot”,”dot”,”dog”,”cog”],<br>  [“hit”,”hot”,”lot”,”log”,”cog”]<br>]</p><p><strong>Example 2:</strong></p><p>Input:<br>beginWord = “hit”<br>endWord = “cog”<br>wordList = [“hot”,”dot”,”dog”,”lot”,”log”]</p><p>Output: []</p><p>Explanation: The endWord “cog” is not in wordList, therefore no possible transformation.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Approach: BFS + DFS</span></span><br><span class="line"><span class="comment"> * 答案要求最短路径，因此我们想到了使用 BFS，</span></span><br><span class="line"><span class="comment"> * 但是又需要我们输出所有路径，因此我们还需要使用 DFS 进行遍历。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 具体的做法为：</span></span><br><span class="line"><span class="comment"> * 先使用 BFS 搜索出 beginWord 到 endWord 之间最短的路径。</span></span><br><span class="line"><span class="comment"> * 并在搜索的过程中建立好 关系图，即每个结点对应的下一层节点（邻居）分别为哪些。</span></span><br><span class="line"><span class="comment"> * 同时为了在 DFS 时，能够知道遍历的是否是最短路径，我们还需要保存各个 单词节点 到 beginWord 的距离。</span></span><br><span class="line"><span class="comment"> * 有了以上信息之后，我们再使用 DFS 从 beginWord 开始</span></span><br><span class="line"><span class="comment"> * 遍历由 BFS 建立好的关系图，得到所有的最短路径即可。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 不少人会问，为什么我们需要使用到 BFS 呢？直接使用 DFS 枚举不好吗？</span></span><br><span class="line"><span class="comment"> * 原因是，直接使用 DFS 暴力查找的话会耗费掉许多时间。</span></span><br><span class="line"><span class="comment"> * 比如 beginWord 和 endWord 之间距离只有 3，但是整张图非常大（两个点距离有1000的那种），</span></span><br><span class="line"><span class="comment"> * 这个时候如果使用 DFS，毫无疑问会超时。</span></span><br><span class="line"><span class="comment"> * 而如果实现使用 BFS 对图进行处理，构建出我们需要的那个部分，然后再 DFS 就可以节省大量的时间了。</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 本题还有一种更加快速的解法：双向 BFS</span></span><br><span class="line"><span class="comment"> * https://leetcode.com/problems/word-ladder-ii/discuss/40477/Super-fast-Java-solution-(two-end-BFS)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; findLadders(String beginWord, String endWord, List&lt;String&gt; wordList) &#123;</span><br><span class="line">        Set&lt;String&gt; wordSet = <span class="keyword">new</span> HashSet&lt;&gt;(wordList);</span><br><span class="line">        <span class="keyword">if</span> (!wordSet.contains(endWord)) <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        wordSet.add(beginWord);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 记录一个单词 BFS 的下一层节点</span></span><br><span class="line">        Map&lt;String, List&lt;String&gt;&gt; neighbors = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">// 记录该单词与 beginWord 之间的距离，同时也充当了 visitedSet 的作用</span></span><br><span class="line">        Map&lt;String, Integer&gt; distance = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        List&lt;List&lt;String&gt;&gt; rst = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        bfs(beginWord, endWord, wordSet, neighbors, distance);</span><br><span class="line">        dfs(beginWord, endWord, neighbors, distance, <span class="keyword">new</span> LinkedList&lt;&gt;(), rst);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> rst;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 利用 bfs 找到最短路径，并构建出关系图</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">bfs</span><span class="params">(String beginWord, String endWord, Set&lt;String&gt; wordSet, Map&lt;String, List&lt;String&gt;&gt; neighbors, Map&lt;String, Integer&gt; distance)</span> </span>&#123;</span><br><span class="line">        Queue&lt;String&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        queue.offer(beginWord);</span><br><span class="line">        distance.put(beginWord, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> size = queue.size();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                String curr = queue.poll();</span><br><span class="line">                <span class="comment">// 遇到 endWord 就退出，其他的信息我们已经不需要了</span></span><br><span class="line">                <span class="keyword">if</span> (curr.equals(endWord)) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                List&lt;String&gt; currNeig = getNeighbors(curr, wordSet);</span><br><span class="line">                Iterator&lt;String&gt; iterator = currNeig.iterator();</span><br><span class="line">                <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">                    String word = iterator.next();</span><br><span class="line">                    <span class="comment">// 如果之前没有遍历过该单词，则将其加入到队列中，并记录 distance 信息</span></span><br><span class="line">                    <span class="keyword">if</span> (!distance.containsKey(word)) &#123;</span><br><span class="line">                        queue.offer(word);</span><br><span class="line">                        distance.put(word, distance.get(curr) + <span class="number">1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 记录当前单词节点对应的 下一级节点的信息（邻居信息）</span></span><br><span class="line">                neighbors.put(curr, currNeig);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历获取邻居节点，与 Word Ladder 中的方法相同</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;String&gt; <span class="title">getNeighbors</span><span class="params">(String curr, Set&lt;String&gt; wordSet)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; neighbors = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">char</span>[] chars = curr.toCharArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; chars.length; i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> old = chars[i];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">char</span> ch = <span class="string">'a'</span>; ch &lt;= <span class="string">'z'</span>; ch++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (ch == old) <span class="keyword">continue</span>;</span><br><span class="line">                chars[i] = ch;</span><br><span class="line">                String nextWord = String.valueOf(chars);</span><br><span class="line">                <span class="keyword">if</span> (wordSet.contains(nextWord)) neighbors.add(nextWord);</span><br><span class="line">            &#125;</span><br><span class="line">            chars[i] = old;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> neighbors;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// dfs 遍历求解所有路径</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(String currWord, String endWord, Map&lt;String, List&lt;String&gt;&gt; neighbors, Map&lt;String, Integer&gt; distance,</span></span></span><br><span class="line"><span class="function"><span class="params">                     LinkedList&lt;String&gt; list, List&lt;List&lt;String&gt;&gt; rst)</span> </span>&#123;</span><br><span class="line">        list.add(currWord);</span><br><span class="line">        <span class="keyword">if</span> (currWord.equals(endWord)) &#123;</span><br><span class="line">            rst.add(<span class="keyword">new</span> LinkedList&lt;&gt;(list));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (String neig : neighbors.get(currWord)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (neig == <span class="keyword">null</span>) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="comment">// 利用到了 distance 信息，只有当 neig 是 bfs 的下一级节点时才遍历</span></span><br><span class="line">                <span class="comment">// 因为不是所有的 neigh 都是到 endWord 的最短路径</span></span><br><span class="line">                <span class="keyword">if</span> (distance.get(neig) == distance.get(currWord) + <span class="number">1</span>) &#123;</span><br><span class="line">                    dfs(neig, endWord, neighbors, distance, list, rst);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        list.remove(list.size() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Two-end-BFS</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; findLadders(String start, String end, Set&lt;String&gt; dict) &#123;</span><br><span class="line">    <span class="comment">// hash set for both ends</span></span><br><span class="line">    Set&lt;String&gt; set1 = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line">    Set&lt;String&gt; set2 = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// initial words in both ends</span></span><br><span class="line">    set1.add(start);</span><br><span class="line">    set2.add(end);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// we use a map to help construct the final result</span></span><br><span class="line">    Map&lt;String, List&lt;String&gt;&gt; map = <span class="keyword">new</span> HashMap&lt;String, List&lt;String&gt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// build the map</span></span><br><span class="line">    helper(dict, set1, set2, map, <span class="keyword">false</span>);</span><br><span class="line">    </span><br><span class="line">    List&lt;List&lt;String&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;List&lt;String&gt;&gt;();</span><br><span class="line">    List&lt;String&gt; sol = <span class="keyword">new</span> ArrayList&lt;String&gt;(Arrays.asList(start));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// recursively build the final result</span></span><br><span class="line">    generateList(start, end, map, sol, res);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">helper</span><span class="params">(Set&lt;String&gt; dict, Set&lt;String&gt; set1, Set&lt;String&gt; set2, Map&lt;String, List&lt;String&gt;&gt; map, <span class="keyword">boolean</span> flip)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (set1.isEmpty()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (set1.size() &gt; set2.size()) <span class="keyword">return</span> helper(dict, set2, set1, map, !flip);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// remove words on current both ends from the dict</span></span><br><span class="line">    dict.removeAll(set1);</span><br><span class="line">    dict.removeAll(set2);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// as we only need the shortest paths</span></span><br><span class="line">    <span class="comment">// we use a boolean value help early termination</span></span><br><span class="line">    <span class="keyword">boolean</span> done = <span class="keyword">false</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// set for the next level</span></span><br><span class="line">    Set&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// for each string in end 1</span></span><br><span class="line">    <span class="keyword">for</span> (String str : set1) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">        <span class="keyword">char</span>[] chars = str.toCharArray();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// change one character for every position</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> ch = <span class="string">'a'</span>; ch &lt;= <span class="string">'z'</span>; ch++) &#123;</span><br><span class="line">          chars[i] = ch;</span><br><span class="line">          </span><br><span class="line">          String word = <span class="keyword">new</span> String(chars);</span><br><span class="line">          </span><br><span class="line">          <span class="comment">// make sure we construct the tree in the correct direction</span></span><br><span class="line">          String key = flip ? word : str;</span><br><span class="line">          String val = flip ? str : word;</span><br><span class="line">              </span><br><span class="line">          List&lt;String&gt; list = map.containsKey(key) ? map.get(key) : <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">              </span><br><span class="line">          <span class="keyword">if</span> (set2.contains(word)) &#123;</span><br><span class="line">            done = <span class="keyword">true</span>;</span><br><span class="line">            </span><br><span class="line">            list.add(val);</span><br><span class="line">            map.put(key, list);</span><br><span class="line">          &#125; </span><br><span class="line">          </span><br><span class="line">          <span class="keyword">if</span> (!done &amp;&amp; dict.contains(word)) &#123;</span><br><span class="line">            set.add(word);</span><br><span class="line">            </span><br><span class="line">            list.add(val);</span><br><span class="line">            map.put(key, list);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// early terminate if done is true</span></span><br><span class="line">    <span class="keyword">return</span> done || helper(dict, set2, set, map, !flip);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">generateList</span><span class="params">(String start, String end, Map&lt;String, List&lt;String&gt;&gt; map, List&lt;String&gt; sol, List&lt;List&lt;String&gt;&gt; res)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (start.equals(end)) &#123;</span><br><span class="line">      res.add(<span class="keyword">new</span> ArrayList&lt;String&gt;(sol));</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// need this check in case the diff between start and end happens to be one</span></span><br><span class="line">    <span class="comment">// e.g "a", "c", &#123;"a", "b", "c"&#125;</span></span><br><span class="line">    <span class="keyword">if</span> (!map.containsKey(start)) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (String word : map.get(start)) &#123;</span><br><span class="line">      sol.add(word);</span><br><span class="line">      generateList(word, end, map, sol, res);</span><br><span class="line">      sol.remove(sol.size() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Given two words (beginWord and endWord), and a dictionary’s word list, find all shortest transformation sequence(s) from beginWord to endWord, such that:&lt;/p&gt;
&lt;p&gt;Only one letter can be changed at a time&lt;br&gt;Each transformed word must exist in the word list. Note that beginWord is not a transformed word.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="https://everise.github.io/categories/LeetCode/"/>
    
      <category term="Amazon" scheme="https://everise.github.io/categories/LeetCode/Amazon/"/>
    
    
  </entry>
  
  <entry>
    <title>LeetCode 41: First Missing Positive</title>
    <link href="https://everise.github.io/2019/06/15/LeetCode-41-First-Missing-Positive/"/>
    <id>https://everise.github.io/2019/06/15/LeetCode-41-First-Missing-Positive/</id>
    <published>2019-06-16T02:32:39.000Z</published>
    <updated>2019-06-16T02:44:44.300Z</updated>
    
    <content type="html"><![CDATA[<p>Given an unsorted integer array, find the smallest missing positive integer.</p><p><strong>Example 1:</strong></p><p>Input: [1,2,0]<br>Output: 3<br><a id="more"></a><br><strong>Example 2:</strong></p><p>Input: [3,4,-1,1]<br>Output: 2</p><p><strong>Example 3:</strong></p><p>Input: [7,8,9,11,12]<br>Output: 1</p><p><strong>Note:</strong></p><p>Your algorithm should run in O(n) time and uses constant extra space.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">firstMissingPositive</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (nums[i] &gt; <span class="number">0</span> &amp;&amp; nums[i] &lt;= nums.length &amp;&amp; nums[nums[i]-<span class="number">1</span>] != nums[i]) &#123;</span><br><span class="line">            <span class="keyword">int</span> tmp = nums[nums[i]-<span class="number">1</span>];</span><br><span class="line">            nums[nums[i]-<span class="number">1</span>] = nums[i];</span><br><span class="line">            nums[i] = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] != i + <span class="number">1</span>) <span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> nums.length + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Given an unsorted integer array, find the smallest missing positive integer.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Input: [1,2,0]&lt;br&gt;Output: 3&lt;br&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="https://everise.github.io/categories/LeetCode/"/>
    
      <category term="Amazon" scheme="https://everise.github.io/categories/LeetCode/Amazon/"/>
    
    
  </entry>
  
  <entry>
    <title>LeetCode 27: Remove Element</title>
    <link href="https://everise.github.io/2019/06/15/LeetCode-27-Remove-Element/"/>
    <id>https://everise.github.io/2019/06/15/LeetCode-27-Remove-Element/</id>
    <published>2019-06-16T02:13:25.000Z</published>
    <updated>2019-06-16T02:29:22.991Z</updated>
    
    <content type="html"><![CDATA[<p>Given an array nums and a value val, remove all instances of that value in-place and return the new length.</p><p>Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.</p><p>The order of elements can be changed. It doesn’t matter what you leave beyond the new length.<br><a id="more"></a><br><strong>Example 1:</strong></p><p>Given nums = [3,2,2,3], val = 3,</p><p>Your function should return length = 2, with the first two elements of nums being 2.</p><p>It doesn’t matter what you leave beyond the returned length.</p><p><strong>Example 2:</strong></p><p>Given nums = [0,1,2,2,3,0,4,2], val = 2,</p><p>Your function should return length = 5, with the first five elements of nums containing 0, 1, 3, 0, and 4.</p><p>Note that the order of those five elements can be arbitrary.</p><p>It doesn’t matter what values are set beyond the returned length.</p><p><strong>Clarification:</strong></p><p>Confused why the returned value is an integer but your answer is an array?</p><p>Note that the input array is passed in by reference, which means modification to the input array will be known to the caller as well.</p><p>Internally you can think of this:</p><p>// nums is passed in by reference. (i.e., without making a copy)<br>int len = removeElement(nums, val);</p><p>// any modification to nums in your function would be known by the caller.<br>// using the length returned by your function, it prints the first len elements.<br>for (int i = 0; i &lt; len; i++) {<br>    print(nums[i]);<br>}</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeElement</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i : nums) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i != val) nums[res++] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Given an array nums and a value val, remove all instances of that value in-place and return the new length.&lt;/p&gt;
&lt;p&gt;Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.&lt;/p&gt;
&lt;p&gt;The order of elements can be changed. It doesn’t matter what you leave beyond the new length.&lt;br&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="https://everise.github.io/categories/LeetCode/"/>
    
      <category term="Amazon" scheme="https://everise.github.io/categories/LeetCode/Amazon/"/>
    
    
  </entry>
  
</feed>
