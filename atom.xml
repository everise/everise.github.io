<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Everise&#39;s Notes</title>
  
  <subtitle>Quick Notes</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://everise.github.io/"/>
  <updated>2019-06-16T02:13:39.901Z</updated>
  <id>https://everise.github.io/</id>
  
  <author>
    <name>everise</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LeetCode 27: Remove Element</title>
    <link href="https://everise.github.io/2019/06/15/LeetCode-27-Remove-Element/"/>
    <id>https://everise.github.io/2019/06/15/LeetCode-27-Remove-Element/</id>
    <published>2019-06-16T02:13:25.000Z</published>
    <updated>2019-06-16T02:13:39.901Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="LeetCode" scheme="https://everise.github.io/categories/LeetCode/"/>
    
      <category term="Amazon" scheme="https://everise.github.io/categories/LeetCode/Amazon/"/>
    
    
  </entry>
  
  <entry>
    <title>LeetCode 23: Merge k Sorted Lists</title>
    <link href="https://everise.github.io/2019/06/15/LeetCode-23-Merge-k-Sorted-Lists/"/>
    <id>https://everise.github.io/2019/06/15/LeetCode-23-Merge-k-Sorted-Lists/</id>
    <published>2019-06-16T02:12:54.000Z</published>
    <updated>2019-06-16T02:13:04.143Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="LeetCode" scheme="https://everise.github.io/categories/LeetCode/"/>
    
      <category term="Amazon" scheme="https://everise.github.io/categories/LeetCode/Amazon/"/>
    
    
  </entry>
  
  <entry>
    <title>LeetCode 5: Longest Palindromic Substring</title>
    <link href="https://everise.github.io/2019/06/15/LeetCode-5-Longest-Palindromic-Substring-1/"/>
    <id>https://everise.github.io/2019/06/15/LeetCode-5-Longest-Palindromic-Substring-1/</id>
    <published>2019-06-16T02:09:07.000Z</published>
    <updated>2019-06-16T02:09:07.858Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Password Test</title>
    <link href="https://everise.github.io/2019/06/15/Password-Test/"/>
    <id>https://everise.github.io/2019/06/15/Password-Test/</id>
    <published>2019-06-16T00:16:56.000Z</published>
    <updated>2019-06-16T00:26:53.283Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script> <div id="hbe-security"> <div class="hbe-input-container"> <input type="password" class="hbe-form-control" id="pass" placeholder="Welcome to my blog, enter password to read." /> <label for="pass">Welcome to my blog, enter password to read.</label> <div class="bottom-line"></div> </div> </div> <div id="decryptionError" style="display:none;">Incorrect Password!</div> <div id="noContentError" style="display:none;">No content to display!</div> <div id="encrypt-blog" style="display:none"> U2FsdGVkX18vPWmjL892mpOSp85TpzHoXejNiTd79mDIVR8mE+cI7LTAeuWh/PW94TxEUGzatbGXqaMEqakJzKbfxj5IjtsAaIlxQ8kgt7cu7HhqeVd3UgmuHRq77LxY7TN8tWSZ4GhncYy3V0TGKbJP4ePNd17lO+0Zzp/CAW1EqhD2NbrIzKOVMA4tE6H2eOUuokRFkovLjfMNO4bLy4Ix/KtaJZGqn+0W/V0xBaRioC8rLjwBhiu8Hgtd59NZ </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Welcome to my blog, enter password to read.
    
    </summary>
    
      <category term="Test" scheme="https://everise.github.io/categories/Test/"/>
    
    
      <category term="Test" scheme="https://everise.github.io/tags/Test/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 4: Median of Two Sorted Arrays</title>
    <link href="https://everise.github.io/2018/10/17/LeetCode-4-Median-of-Two-Sorted-Arrays/"/>
    <id>https://everise.github.io/2018/10/17/LeetCode-4-Median-of-Two-Sorted-Arrays/</id>
    <published>2018-10-18T03:05:04.000Z</published>
    <updated>2019-06-16T02:17:51.202Z</updated>
    
    <content type="html"><![CDATA[<p>There are two sorted arrays <strong>nums1</strong> and <strong>nums2</strong> of size m and n respectively.</p><p>Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).</p><p>You may assume <strong>nums1</strong> and <strong>nums2</strong> cannot be both empty.<br><a id="more"></a><br><strong>Example 1:</strong><br>nums1 = [1, 3]<br>nums2 = [2]</p><p>The median is 2.0</p><p><strong>Example 2:</strong><br>nums1 = [1, 2]<br>nums2 = [3, 4]</p><p>The median is (2 + 3)/2 = 2.5</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n1 = nums1.length;</span><br><span class="line">    <span class="keyword">int</span> n2 = nums2.length;</span><br><span class="line">    <span class="keyword">if</span> (n1 &gt; n2) &#123; <span class="keyword">return</span> findMedianSortedArrays(nums2, nums1); &#125;</span><br><span class="line">    <span class="keyword">int</span> k = (n1 + n2 + <span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> right = n1;</span><br><span class="line">    <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">        <span class="keyword">int</span> m1 = left + (right - left)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> m2 = k - m1;</span><br><span class="line">        <span class="keyword">if</span> (nums1[m1] &lt; nums2[m2-<span class="number">1</span>]) &#123;</span><br><span class="line">            left = m1 + <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            right = m1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> m1 = left;</span><br><span class="line">    <span class="keyword">int</span> m2 = k - left;</span><br><span class="line">    <span class="keyword">int</span> c1 = Math.max(m1 &lt;= <span class="number">0</span> ? Integer.MIN_VALUE : nums1[m1-<span class="number">1</span>],</span><br><span class="line">                        m2 &lt;= <span class="number">0</span> ? Integer.MIN_VALUE : nums2[m2-<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">if</span> ((n1 + n2) % <span class="number">2</span> == <span class="number">1</span>) &#123; <span class="keyword">return</span> c1; &#125;</span><br><span class="line">    <span class="keyword">int</span> c2 = Math.min( m1 &gt;= n1 ? Integer.MAX_VALUE :nums1[m1],</span><br><span class="line">                        m2 &gt;= n2 ? Integer.MAX_VALUE : nums2[m2]);</span><br><span class="line">    <span class="keyword">return</span> (c1 + c2) * <span class="number">0.5</span>;</span><br><span class="line">&#125;</span><br><span class="line">``` </span><br><span class="line">##</span><br><span class="line"></span><br><span class="line">``` go</span><br><span class="line"><span class="function">func <span class="title">findMedianSortedArrays</span><span class="params">(nums1 []<span class="keyword">int</span>, nums2 []<span class="keyword">int</span>)</span> float64 </span>&#123;</span><br><span class="line">    n1 := len(nums1)</span><br><span class="line">    n2 := len(nums2)</span><br><span class="line">    <span class="keyword">if</span> n1 &lt; n2 &#123;</span><br><span class="line">        <span class="keyword">return</span> findMedianSortedArrays(nums2, nums1)</span><br><span class="line">    &#125;</span><br><span class="line">    lo, hi := <span class="number">0</span>, n2 * <span class="number">2</span></span><br><span class="line">    <span class="keyword">for</span> lo &lt;= hi &#123;</span><br><span class="line">        mid2 := (lo + hi) &gt;&gt; <span class="number">1</span></span><br><span class="line">        mid1 := n1 + n2 - mid2</span><br><span class="line">        var l1, l2, r1, r2 <span class="keyword">int</span></span><br><span class="line">        <span class="keyword">if</span> mid1 == <span class="number">0</span> &#123;</span><br><span class="line">            l1 = ^(<span class="keyword">int</span>(^uint(<span class="number">0</span>) &gt;&gt; <span class="number">1</span>))</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            l1 = nums1[(mid1-<span class="number">1</span>)/<span class="number">2</span>]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> mid2 == <span class="number">0</span> &#123;</span><br><span class="line">            l2 = ^(<span class="keyword">int</span>(^uint(<span class="number">0</span>) &gt;&gt; <span class="number">1</span>))</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            l2 = nums2[(mid2-<span class="number">1</span>)/<span class="number">2</span>]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> mid1 == n1 * <span class="number">2</span> &#123;</span><br><span class="line">            r1 = <span class="keyword">int</span>(^uint(<span class="number">0</span>) &gt;&gt; <span class="number">1</span>)</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            r1 = nums1[mid1/<span class="number">2</span>]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> mid2 == n2 * <span class="number">2</span> &#123;</span><br><span class="line">            r2 = <span class="keyword">int</span>(^uint(<span class="number">0</span>) &gt;&gt; <span class="number">1</span>)</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            r2 = nums2[mid2/<span class="number">2</span>]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> l1 &gt; r2 &#123;</span><br><span class="line">            lo = mid2 + <span class="number">1</span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> l2 &gt; r1 &#123;</span><br><span class="line">            hi = mid2 - <span class="number">1</span></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            var max, min <span class="keyword">int</span></span><br><span class="line">            <span class="keyword">if</span> l1 &lt; l2 &#123;</span><br><span class="line">                max = l2</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                max = l1</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> r1 &lt; r2 &#123;</span><br><span class="line">                min = r1</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                min = r2</span><br><span class="line">            &#125;</span><br><span class="line">            res := float64(max + min) / <span class="number">2.0</span></span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> float64(-<span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;There are two sorted arrays &lt;strong&gt;nums1&lt;/strong&gt; and &lt;strong&gt;nums2&lt;/strong&gt; of size m and n respectively.&lt;/p&gt;
&lt;p&gt;Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).&lt;/p&gt;
&lt;p&gt;You may assume &lt;strong&gt;nums1&lt;/strong&gt; and &lt;strong&gt;nums2&lt;/strong&gt; cannot be both empty.&lt;br&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="https://everise.github.io/categories/LeetCode/"/>
    
      <category term="Amazon" scheme="https://everise.github.io/categories/LeetCode/Amazon/"/>
    
    
      <category term="Array" scheme="https://everise.github.io/tags/Array/"/>
    
      <category term="Binary Search" scheme="https://everise.github.io/tags/Binary-Search/"/>
    
      <category term="Divide and Conquer" scheme="https://everise.github.io/tags/Divide-and-Conquer/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 346: Moving Average from Data Stream</title>
    <link href="https://everise.github.io/2018/10/14/LeetCode-346-Moving-Average-from-Data-Stream/"/>
    <id>https://everise.github.io/2018/10/14/LeetCode-346-Moving-Average-from-Data-Stream/</id>
    <published>2018-10-14T20:25:06.000Z</published>
    <updated>2018-10-14T20:25:06.882Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>LeetCode 486: Predict the Winner</title>
    <link href="https://everise.github.io/2018/10/14/LeetCode-486-Predict-the-Winner/"/>
    <id>https://everise.github.io/2018/10/14/LeetCode-486-Predict-the-Winner/</id>
    <published>2018-10-14T20:24:52.000Z</published>
    <updated>2018-10-14T20:24:52.287Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>LeetCode 734: Sentence Similarity</title>
    <link href="https://everise.github.io/2018/10/14/LeetCode-734-Sentence-Similarity/"/>
    <id>https://everise.github.io/2018/10/14/LeetCode-734-Sentence-Similarity/</id>
    <published>2018-10-14T20:24:05.000Z</published>
    <updated>2018-10-14T20:24:05.527Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>LeetCode 307: Range Sum Query - Mutable</title>
    <link href="https://everise.github.io/2018/10/14/LeetCode-307-Range-Sum-Query-Mutable/"/>
    <id>https://everise.github.io/2018/10/14/LeetCode-307-Range-Sum-Query-Mutable/</id>
    <published>2018-10-14T20:23:51.000Z</published>
    <updated>2018-10-14T20:23:51.602Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>LeetCode 447: Number of Boomerangs</title>
    <link href="https://everise.github.io/2018/10/14/LeetCode-447-Number-of-Boomerangs/"/>
    <id>https://everise.github.io/2018/10/14/LeetCode-447-Number-of-Boomerangs/</id>
    <published>2018-10-14T20:23:36.000Z</published>
    <updated>2018-10-14T20:23:36.843Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
</feed>
