<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Everise&#39;s Notes</title>
  
  <subtitle>Quick Notes</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://everise.github.io/"/>
  <updated>2019-06-16T02:37:56.565Z</updated>
  <id>https://everise.github.io/</id>
  
  <author>
    <name>everise</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LeetCode 146: LRU Cache</title>
    <link href="https://everise.github.io/2019/06/15/LeetCode-146-LRU-Cache/"/>
    <id>https://everise.github.io/2019/06/15/LeetCode-146-LRU-Cache/</id>
    <published>2019-06-16T02:36:55.000Z</published>
    <updated>2019-06-16T02:37:56.565Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="LeetCode" scheme="https://everise.github.io/categories/LeetCode/"/>
    
      <category term="Amazon" scheme="https://everise.github.io/categories/LeetCode/Amazon/"/>
    
    
  </entry>
  
  <entry>
    <title>LeetCode 140: Word Break II</title>
    <link href="https://everise.github.io/2019/06/15/LeetCode-140-Word-Break-II/"/>
    <id>https://everise.github.io/2019/06/15/LeetCode-140-Word-Break-II/</id>
    <published>2019-06-16T02:36:07.000Z</published>
    <updated>2019-06-16T02:37:51.653Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="LeetCode" scheme="https://everise.github.io/categories/LeetCode/"/>
    
      <category term="Amazon" scheme="https://everise.github.io/categories/LeetCode/Amazon/"/>
    
    
  </entry>
  
  <entry>
    <title>LeetCode 138: Copy List with Random Pointer</title>
    <link href="https://everise.github.io/2019/06/15/LeetCode-138-Copy-List-with-Random-Pointer/"/>
    <id>https://everise.github.io/2019/06/15/LeetCode-138-Copy-List-with-Random-Pointer/</id>
    <published>2019-06-16T02:35:41.000Z</published>
    <updated>2019-06-16T02:35:41.657Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>LeetCode 133: Clone Graph</title>
    <link href="https://everise.github.io/2019/06/15/LeetCode-133-Clone-Graph/"/>
    <id>https://everise.github.io/2019/06/15/LeetCode-133-Clone-Graph/</id>
    <published>2019-06-16T02:35:15.000Z</published>
    <updated>2019-06-16T02:37:46.177Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="LeetCode" scheme="https://everise.github.io/categories/LeetCode/"/>
    
      <category term="Amazon" scheme="https://everise.github.io/categories/LeetCode/Amazon/"/>
    
    
  </entry>
  
  <entry>
    <title>LeetCode 128: Longest Consecutive Sequence</title>
    <link href="https://everise.github.io/2019/06/15/LeetCode-128-Longest-Consecutive-Sequence/"/>
    <id>https://everise.github.io/2019/06/15/LeetCode-128-Longest-Consecutive-Sequence/</id>
    <published>2019-06-16T02:34:47.000Z</published>
    <updated>2019-06-16T02:37:42.597Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="LeetCode" scheme="https://everise.github.io/categories/LeetCode/"/>
    
      <category term="Amazon" scheme="https://everise.github.io/categories/LeetCode/Amazon/"/>
    
    
  </entry>
  
  <entry>
    <title>LeetCode 127: Word Ladder</title>
    <link href="https://everise.github.io/2019/06/15/LeetCode-127-Word-Ladder/"/>
    <id>https://everise.github.io/2019/06/15/LeetCode-127-Word-Ladder/</id>
    <published>2019-06-16T02:34:22.000Z</published>
    <updated>2019-06-16T02:37:39.153Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="LeetCode" scheme="https://everise.github.io/categories/LeetCode/"/>
    
      <category term="Amazon" scheme="https://everise.github.io/categories/LeetCode/Amazon/"/>
    
    
  </entry>
  
  <entry>
    <title>LeetCode 126: Word Ladder II</title>
    <link href="https://everise.github.io/2019/06/15/LeetCode-126-Word-Ladder-II/"/>
    <id>https://everise.github.io/2019/06/15/LeetCode-126-Word-Ladder-II/</id>
    <published>2019-06-16T02:34:07.000Z</published>
    <updated>2019-06-16T02:37:36.299Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="LeetCode" scheme="https://everise.github.io/categories/LeetCode/"/>
    
      <category term="Amazon" scheme="https://everise.github.io/categories/LeetCode/Amazon/"/>
    
    
  </entry>
  
  <entry>
    <title>LeetCode 41: First Missing Positive</title>
    <link href="https://everise.github.io/2019/06/15/LeetCode-41-First-Missing-Positive/"/>
    <id>https://everise.github.io/2019/06/15/LeetCode-41-First-Missing-Positive/</id>
    <published>2019-06-16T02:32:39.000Z</published>
    <updated>2019-06-16T02:37:24.627Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="LeetCode" scheme="https://everise.github.io/categories/LeetCode/"/>
    
      <category term="Amazon" scheme="https://everise.github.io/categories/LeetCode/Amazon/"/>
    
    
  </entry>
  
  <entry>
    <title>LeetCode 27: Remove Element</title>
    <link href="https://everise.github.io/2019/06/15/LeetCode-27-Remove-Element/"/>
    <id>https://everise.github.io/2019/06/15/LeetCode-27-Remove-Element/</id>
    <published>2019-06-16T02:13:25.000Z</published>
    <updated>2019-06-16T02:29:22.991Z</updated>
    
    <content type="html"><![CDATA[<p>Given an array nums and a value val, remove all instances of that value in-place and return the new length.</p><p>Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.</p><p>The order of elements can be changed. It doesn’t matter what you leave beyond the new length.<br><a id="more"></a><br><strong>Example 1:</strong></p><p>Given nums = [3,2,2,3], val = 3,</p><p>Your function should return length = 2, with the first two elements of nums being 2.</p><p>It doesn’t matter what you leave beyond the returned length.</p><p><strong>Example 2:</strong></p><p>Given nums = [0,1,2,2,3,0,4,2], val = 2,</p><p>Your function should return length = 5, with the first five elements of nums containing 0, 1, 3, 0, and 4.</p><p>Note that the order of those five elements can be arbitrary.</p><p>It doesn’t matter what values are set beyond the returned length.</p><p><strong>Clarification:</strong></p><p>Confused why the returned value is an integer but your answer is an array?</p><p>Note that the input array is passed in by reference, which means modification to the input array will be known to the caller as well.</p><p>Internally you can think of this:</p><p>// nums is passed in by reference. (i.e., without making a copy)<br>int len = removeElement(nums, val);</p><p>// any modification to nums in your function would be known by the caller.<br>// using the length returned by your function, it prints the first len elements.<br>for (int i = 0; i &lt; len; i++) {<br>    print(nums[i]);<br>}</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeElement</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i : nums) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i != val) nums[res++] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Given an array nums and a value val, remove all instances of that value in-place and return the new length.&lt;/p&gt;
&lt;p&gt;Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.&lt;/p&gt;
&lt;p&gt;The order of elements can be changed. It doesn’t matter what you leave beyond the new length.&lt;br&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="https://everise.github.io/categories/LeetCode/"/>
    
      <category term="Amazon" scheme="https://everise.github.io/categories/LeetCode/Amazon/"/>
    
    
  </entry>
  
  <entry>
    <title>LeetCode 23: Merge k Sorted Lists</title>
    <link href="https://everise.github.io/2019/06/15/LeetCode-23-Merge-k-Sorted-Lists/"/>
    <id>https://everise.github.io/2019/06/15/LeetCode-23-Merge-k-Sorted-Lists/</id>
    <published>2019-06-16T02:12:54.000Z</published>
    <updated>2019-06-16T02:27:30.601Z</updated>
    
    <content type="html"><![CDATA[<p>Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.</p><p><strong>Example:</strong><br><a id="more"></a><br>Input:<br>[<br>  1-&gt;4-&gt;5,<br>  1-&gt;3-&gt;4,<br>  2-&gt;6<br>]<br>Output: 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeKLists</span><span class="params">(ListNode[] lists)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(lists==<span class="keyword">null</span>||lists.length==<span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    PriorityQueue&lt;ListNode&gt; queue = <span class="keyword">new</span> PriorityQueue&lt;ListNode&gt;(<span class="keyword">new</span> Comparator&lt;ListNode&gt;()&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(ListNode l1, ListNode l2)</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> l1.val - l2.val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    ListNode head = <span class="keyword">new</span> ListNode(-<span class="number">1</span>);</span><br><span class="line">    ListNode p = head;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(ListNode list: lists)&#123;</span><br><span class="line">        <span class="keyword">if</span>(list!=<span class="keyword">null</span>) queue.offer(list);</span><br><span class="line">    &#125;    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">        ListNode n = queue.poll();</span><br><span class="line">        p.next = n;</span><br><span class="line">        p=p.next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(n.next!=<span class="keyword">null</span>) queue.offer(n.next);</span><br><span class="line">    &#125;    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> head.next; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="https://everise.github.io/categories/LeetCode/"/>
    
      <category term="Amazon" scheme="https://everise.github.io/categories/LeetCode/Amazon/"/>
    
    
  </entry>
  
</feed>
